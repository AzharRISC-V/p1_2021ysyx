// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ResourceWrapper.Generator
{
    using System.Reflection;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class ResourcesWrapper : Transformation
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("//-----------------------------------------------------------------------------\r\n" +
                    "//\r\n//\tThis code was generated by a ");
            
            #line 5 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Assembly.GetEntryAssembly().GetName().Name));
            
            #line default
            #line hidden
            this.Write(" Version ");
            
            #line 5 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Assembly.GetEntryAssembly().GetName().Version.ToString()));
            
            #line default
            #line hidden
            this.Write(".\r\n//\r\n//\tChanges to this file may cause incorrect behavior and will be lost if\r\n" +
                    "//\tthe code is regenerated.\r\n//\r\n//---------------------------------------------" +
                    "--------------------------------\r\n\r\nnamespace ");
            
            #line 12 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.NameSpace));
            
            #line default
            #line hidden
            this.Write(" {\r\n\tusing System;\r\n\tusing System.Diagnostics;\r\n\tusing System.Globalization;\r\n\tus" +
                    "ing System.Runtime.CompilerServices;\r\n\tusing System.ComponentModel;\r\n\tusing Syst" +
                    "em.Resources;\r\n");
            
            #line 19 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
if(this.Pseudo) {
            
            #line default
            #line hidden
            this.Write("\tusing System.Collections.Generic;\r\n\tusing System.Reflection;\r\n");
            
            #line 22 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
}
            
            #line default
            #line hidden
            
            #line 23 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
if(this.FlowDirection) {
            
            #line default
            #line hidden
            this.Write("\tusing System.Windows;\r\n");
            
            #line 25 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
}
            
            #line default
            #line hidden
            this.Write(@"
	/// <summary>
	/// A strongly-typed resource class, for looking up localized strings, etc.
	/// </summary>
	// This class was auto-generated.
	// To add or remove a member, edit your .ResX file then rerun MsBuild,
	// or rebuild your VS project.
	[DebuggerNonUserCodeAttribute()]
	[CompilerGeneratedAttribute()]
	");
            
            #line 35 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.IsPublic ? "public" : "internal"));
            
            #line default
            #line hidden
            this.Write(" static class ");
            
            #line 35 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ClassName));
            
            #line default
            #line hidden
            this.Write(@" {

		/// <summary>
		/// Overrides the current thread's CurrentUICulture property for all
		/// resource lookups using this strongly typed resource class.
		/// </summary>
		[EditorBrowsableAttribute(EditorBrowsableState.Advanced)]
		public static CultureInfo Culture { get; set; }

		/// <summary>
		/// Used for formating of the resource strings. Usually same as CultureInfo.CurrentCulture.
		/// </summary>
		[EditorBrowsableAttribute(EditorBrowsableState.Advanced)]
		public static CultureInfo FormatCulture { get; set; }

");
            
            #line 50 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
if(this.FlowDirection) {
            
            #line default
            #line hidden
            
            #line 51 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
	if(this.Pseudo) {
            
            #line default
            #line hidden
            this.Write("\t\tprivate static bool isRightToLeft = ((Environment.TickCount / 500) & 1) == 0;\r\n" +
                    "");
            
            #line 53 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
	}
            
            #line default
            #line hidden
            this.Write("\t\t/// <summary>\r\n\t\t/// Gets FlowDirection for current culture.\r\n\t\t/// </summary>\r" +
                    "\n\t\tpublic static FlowDirection FlowDirection {\r\n\t\t\tget {\r\n");
            
            #line 59 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
	if(!this.Pseudo) {
            
            #line default
            #line hidden
            this.Write("\t\t\t\tbool isRightToLeft;\r\n\t\t\t\tif(");
            
            #line 61 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ClassName));
            
            #line default
            #line hidden
            this.Write(".Culture != null && ");
            
            #line 61 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ClassName));
            
            #line default
            #line hidden
            this.Write(".Culture.TextInfo != null) {\r\n\t\t\t\t\tisRightToLeft = ");
            
            #line 62 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ClassName));
            
            #line default
            #line hidden
            this.Write(@".Culture.TextInfo.IsRightToLeft;
				} else if(CultureInfo.CurrentUICulture != null && CultureInfo.CurrentUICulture.TextInfo != null) {
					isRightToLeft = CultureInfo.CurrentUICulture.TextInfo.IsRightToLeft;
				} else if(CultureInfo.CurrentCulture != null && CultureInfo.CurrentCulture.TextInfo != null) {
					isRightToLeft = CultureInfo.CurrentCulture.TextInfo.IsRightToLeft;
				} else {
					isRightToLeft = false;
				}
");
            
            #line 70 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
	}
            
            #line default
            #line hidden
            this.Write("\t\t\t\treturn isRightToLeft ? FlowDirection.RightToLeft : FlowDirection.LeftToRight;" +
                    "\r\n\t\t\t}\r\n\t\t}\r\n");
            
            #line 74 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n\t\tprivate static ");
            
            #line 76 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Pseudo ? "Pseudo" : ""));
            
            #line default
            #line hidden
            this.Write(@"ResourceManager resourceManager;

		/// <summary>
		/// Returns the cached ResourceManager instance used by this class.
		/// </summary>
		[EditorBrowsableAttribute(EditorBrowsableState.Advanced)]
		public static ResourceManager ResourceManager {
			get {
				if(resourceManager == null) {
					resourceManager = new ");
            
            #line 85 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Pseudo ? "Pseudo" : ""));
            
            #line default
            #line hidden
            this.Write("ResourceManager(\"");
            
            #line 85 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ResourceName));
            
            #line default
            #line hidden
            this.Write("\", typeof(");
            
            #line 85 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.ClassName));
            
            #line default
            #line hidden
            this.Write(").Assembly);\r\n\t\t\t\t}\r\n\t\t\t\treturn resourceManager;\r\n\t\t\t}\r\n\t\t}\r\n");
            
            #line 90 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
if(this.Pseudo) {
            
            #line default
            #line hidden
            this.Write("\r\n\t\t/// <summary>\r\n\t\t/// Performs pseudo localization of string resources\r\n\t\t/// " +
                    "</summary>\r\n\t\tprivate class PseudoResourceManager : ResourceManager {\r\n\t\t\tprivat" +
                    "e static Dictionary<char, char> map = new Dictionary<char, char> {\r\n\t\t\t\t{ \'a\', \'" +
                    "ä\' },\r\n\t\t\t\t{ \'b\', \'ƃ\' },\r\n\t\t\t\t{ \'c\', \'č\' },\r\n\t\t\t\t{ \'d\', \'ƌ\' },\r\n\t\t\t\t{ \'e\', \'ë\' }" +
                    ",\r\n\t\t\t\t{ \'f\', \'ƒ\' },\r\n\t\t\t\t{ \'g\', \'ğ\' },\r\n\t\t\t\t{ \'h\', \'ħ\' },\r\n\t\t\t\t{ \'i\', \'ï\' },\r\n\t" +
                    "\t\t\t{ \'j\', \'ĵ\' },\r\n\t\t\t\t{ \'k\', \'ƙ\' },\r\n\t\t\t\t{ \'l\', \'ł\' },\r\n\t\t\t\t{ \'m\', \'ɱ\' },\r\n\t\t\t\t{" +
                    " \'n\', \'ň\' },\r\n\t\t\t\t{ \'o\', \'ö\' },\r\n\t\t\t\t{ \'p\', \'þ\' },\r\n\t\t\t\t{ \'q\', \'ɋ\' },\r\n\t\t\t\t{ \'r\'" +
                    ", \'ř\' },\r\n\t\t\t\t{ \'s\', \'š\' },\r\n\t\t\t\t{ \'t\', \'ŧ\' },\r\n\t\t\t\t{ \'u\', \'ü\' },\r\n\t\t\t\t{ \'v\', \'ṽ" +
                    "\' },\r\n\t\t\t\t{ \'w\', \'ŵ\' },\r\n\t\t\t\t{ \'x\', \'ӿ\' },\r\n\t\t\t\t{ \'y\', \'ŷ\' },\r\n\t\t\t\t{ \'z\', \'ž\' }," +
                    "\r\n\t\t\t\t{ \'A\', \'Ä\' },\r\n\t\t\t\t{ \'B\', \'Ɓ\' },\r\n\t\t\t\t{ \'C\', \'Č\' },\r\n\t\t\t\t{ \'D\', \'Đ\' },\r\n\t\t" +
                    "\t\t{ \'E\', \'Ë\' },\r\n\t\t\t\t{ \'F\', \'Ƒ\' },\r\n\t\t\t\t{ \'G\', \'Ğ\' },\r\n\t\t\t\t{ \'H\', \'Ħ\' },\r\n\t\t\t\t{ " +
                    "\'I\', \'Ï\' },\r\n\t\t\t\t{ \'J\', \'Ĵ\' },\r\n\t\t\t\t{ \'K\', \'Ҟ\' },\r\n\t\t\t\t{ \'L\', \'Ł\' },\r\n\t\t\t\t{ \'M\'," +
                    " \'Ӎ\' },\r\n\t\t\t\t{ \'N\', \'Ň\' },\r\n\t\t\t\t{ \'O\', \'Ö\' },\r\n\t\t\t\t{ \'P\', \'Ҏ\' },\r\n\t\t\t\t{ \'Q\', \'Ǫ\'" +
                    " },\r\n\t\t\t\t{ \'R\', \'Ř\' },\r\n\t\t\t\t{ \'S\', \'Š\' },\r\n\t\t\t\t{ \'T\', \'Ŧ\' },\r\n\t\t\t\t{ \'U\', \'Ü\' },\r" +
                    "\n\t\t\t\t{ \'V\', \'Ṽ\' },\r\n\t\t\t\t{ \'W\', \'Ŵ\' },\r\n\t\t\t\t{ \'X\', \'Ӿ\' },\r\n\t\t\t\t{ \'Y\', \'Ŷ\' },\r\n\t\t\t" +
                    "\t{ \'Z\', \'Ž\' },\r\n\t\t\t};\r\n\r\n\t\t\tprivate Dictionary<string, string> resources = new D" +
                    "ictionary<string, string>();\r\n\r\n\t\t\tpublic PseudoResourceManager(string baseName," +
                    " Assembly assembly) : base(baseName, assembly) {\r\n\t\t\t}\r\n\r\n\t\t\tpublic override str" +
                    "ing GetString(string name, CultureInfo culture) {\r\n\t\t\t\tif(culture == null) {\r\n\t\t" +
                    "\t\t\treturn this.Pseudo(name);\r\n\t\t\t\t}\r\n\t\t\t\treturn base.GetString(name, culture);\r\n" +
                    "\t\t\t}\r\n\r\n\t\t\tpublic string GetBaseString(string name, CultureInfo culture) {\r\n\t\t\t\t" +
                    "return base.GetString(name, culture);\r\n\t\t\t}\r\n\r\n\t\t\tpublic string GetBaseString(st" +
                    "ring[] values, string name, CultureInfo culture) {\r\n\t\t\t\tstring text;\r\n\t\t\t\tif(!th" +
                    "is.resources.TryGetValue(name, out text)) {\r\n\t\t\t\t\tRandom random = new Random();\r" +
                    "\n\t\t\t\t\tthis.resources[name] = text = values[random.Next(values.Length)];\r\n\t\t\t\t\tDe" +
                    "bug.WriteLine(\"Pseudo Localizing {0} to value {1}\", name, text);\r\n\t\t\t\t}\r\n\t\t\t\tret" +
                    "urn text;\r\n\t\t\t}\r\n\r\n\t\t\tprivate string Pseudo(string name) {\r\n\t\t\t\tstring text;\r\n\t\t" +
                    "\t\tif(!this.resources.TryGetValue(name, out text)) {\r\n\t\t\t\t\tthis.resources[name] =" +
                    " text = PseudoResourceManager.PseudoLocalize(base.GetString(name, null));\r\n\t\t\t\t}" +
                    "\r\n\t\t\t\treturn text;\r\n\t\t\t}\r\n\r\n\t\t\tprivate static string PseudoLocalize(string text)" +
                    " {\r\n\t\t\t\tif(text == null) {\r\n\t\t\t\t\ttext = string.Empty;\r\n\t\t\t\t}\r\n\t\t\t\tchar[] result " +
                    "= new char[text.Length];\r\n\t\t\t\tbool open = false; // open means loop index i is i" +
                    "nside of the format item. So no translations should happen as all the character " +
                    "are format specifiers.\r\n\t\t\t\tfor(int i = 0; i < text.Length; i++) {\r\n\t\t\t\t\tchar c " +
                    "= text[i];\r\n\t\t\t\t\tif(!open && c == \'{\') {\r\n\t\t\t\t\t\tif(i + 1 < text.Length && text[i" +
                    " + 1] == \'{\') {\r\n\t\t\t\t\t\t\tresult[i++] = c;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\topen = i + 1 < " +
                    "text.Length && \'0\' <= text[i + 1] && text[i + 1] <= \'9\';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else i" +
                    "f(open && c == \'}\') {\r\n\t\t\t\t\t\tif(i + 1 < text.Length && text[i + 1] == \'}\') {\r\n\t\t" +
                    "\t\t\t\t\tresult[i++] = c;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\topen = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t" +
                    "\t\t\tchar pseudo;\r\n\t\t\t\t\tif(!open && map.TryGetValue(c, out pseudo)) {\r\n\t\t\t\t\t\tc = p" +
                    "seudo;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresult[i] = c;\r\n\t\t\t\t}\r\n\t\t\t\treturn \"[-~=\" + new string(resul" +
                    "t) + \"=~-]\";\r\n\t\t\t}\r\n\t\t}\r\n");
            
            #line 215 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
}
            
            #line default
            #line hidden
            
            #line 216 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
foreach(ResourceItem item in this.Items) {
            
            #line default
            #line hidden
            this.Write("\r\n\t\t/// <summary>\r\n\t\t/// Looks up a localized string similar to ");
            
            #line 219 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Comment()));
            
            #line default
            #line hidden
            this.Write(".\r\n\t\t/// </summary>\r\n");
            
            #line 221 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
	if(item.Parameters != null) {
            
            #line default
            #line hidden
            this.Write(" \t\tpublic static string ");
            
            #line 222 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 222 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ParametersDeclaration()));
            
            #line default
            #line hidden
            this.Write(") {\r\n\t\t\treturn string.Format(FormatCulture, ");
            
            #line 223 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.GetStringExpression(this.Pseudo)));
            
            #line default
            #line hidden
            this.Write("\"");
            
            #line 223 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write("\", Culture), ");
            
            #line 223 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.ParametersInvocation()));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t}\r\n");
            
            #line 225 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
	} else if(item.Type == "string") {
            
            #line default
            #line hidden
            this.Write(" \t\tpublic static string ");
            
            #line 226 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write(" {\r\n\t\t\tget { return ");
            
            #line 227 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.GetStringExpression(this.Pseudo)));
            
            #line default
            #line hidden
            this.Write("\"");
            
            #line 227 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write("\", Culture); }\r\n\t\t}\r\n");
            
            #line 229 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
	} else {
            
            #line default
            #line hidden
            this.Write(" \t\tpublic static ");
            
            #line 230 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Type));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 230 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write(" {\r\n\t\t\tget { return (");
            
            #line 231 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Type));
            
            #line default
            #line hidden
            this.Write(")ResourceManager.GetObject(\"");
            
            #line 231 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(item.Name));
            
            #line default
            #line hidden
            this.Write("\", Culture); }\r\n\t\t}\r\n");
            
            #line 233 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
	}
            
            #line default
            #line hidden
            
            #line 234 "C:\Projects\LogicCircuit\LogicCircuit\master\Sources\Tools\ResourceWrapper.Generator\ResourcesWrapper.tt"
}
            
            #line default
            #line hidden
            this.Write("\t}\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
