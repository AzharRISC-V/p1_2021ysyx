//-----------------------------------------------------------------------------
//
//	This code was generated by a ResourceWrapper.Generator Version 2.0.1.1.
//
//	Changes to this file may cause incorrect behavior and will be lost if
//	the code is regenerated.
//
//-----------------------------------------------------------------------------

namespace LogicCircuit.DataPersistent.Properties {
	using System;
	using System.Diagnostics;
	using System.Globalization;
	using System.Runtime.CompilerServices;
	using System.ComponentModel;
	using System.Resources;
	using System.Windows;

	/// <summary>
	/// A strongly-typed resource class, for looking up localized strings, etc.
	/// </summary>
	// This class was auto-generated.
	// To add or remove a member, edit your .ResX file then rerun MsBuild,
	// or rebuild your VS project.
	[DebuggerNonUserCodeAttribute()]
	[CompilerGeneratedAttribute()]
	internal static class Resources {

		/// <summary>
		/// Overrides the current thread's CurrentUICulture property for all
		/// resource lookups using this strongly typed resource class.
		/// </summary>
		[EditorBrowsableAttribute(EditorBrowsableState.Advanced)]
		public static CultureInfo Culture { get; set; }

		/// <summary>
		/// Used for formating of the resource strings. Usually same as CultureInfo.CurrentCulture.
		/// </summary>
		[EditorBrowsableAttribute(EditorBrowsableState.Advanced)]
		public static CultureInfo FormatCulture { get; set; }

		/// <summary>
		/// Gets FlowDirection for current culture.
		/// </summary>
		public static FlowDirection FlowDirection {
			get {
				bool isRightToLeft;
				if(Resources.Culture != null && Resources.Culture.TextInfo != null) {
					isRightToLeft = Resources.Culture.TextInfo.IsRightToLeft;
				} else if(CultureInfo.CurrentUICulture != null && CultureInfo.CurrentUICulture.TextInfo != null) {
					isRightToLeft = CultureInfo.CurrentUICulture.TextInfo.IsRightToLeft;
				} else if(CultureInfo.CurrentCulture != null && CultureInfo.CurrentCulture.TextInfo != null) {
					isRightToLeft = CultureInfo.CurrentCulture.TextInfo.IsRightToLeft;
				} else {
					isRightToLeft = false;
				}
				return isRightToLeft ? FlowDirection.RightToLeft : FlowDirection.LeftToRight;
			}
		}

		private static ResourceManager resourceManager;

		/// <summary>
		/// Returns the cached ResourceManager instance used by this class.
		/// </summary>
		[EditorBrowsableAttribute(EditorBrowsableState.Advanced)]
		public static ResourceManager ResourceManager {
			get {
				if(resourceManager == null) {
					resourceManager = new ResourceManager("LogicCircuit.DataPersistent.Properties.Resources", typeof(Resources).Assembly);
				}
				return resourceManager;
			}
		}

		/// <summary>
		/// Looks up a localized string similar to Attempt to edit on the thread that not started the transaction..
		/// </summary>
 		public static string ErrorEditOnWrongThread {
			get { return ResourceManager.GetString("ErrorEditOnWrongThread", Culture); }
		}

		/// <summary>
		/// Looks up a localized string similar to Attempt to edit outside of transaction..
		/// </summary>
 		public static string ErrorEditOutsideTransaction {
			get { return ResourceManager.GetString("ErrorEditOutsideTransaction", Culture); }
		}

		/// <summary>
		/// Looks up a localized string similar to Enumeration has either not started or has already finished..
		/// </summary>
 		public static string ErrorEnumeratorPosition {
			get { return ResourceManager.GetString("ErrorEnumeratorPosition", Culture); }
		}

		/// <summary>
		/// Looks up a localized string similar to Version of store was changed; enumeration operation may not execute..
		/// </summary>
 		public static string ErrorEnumeratorVersion {
			get { return ResourceManager.GetString("ErrorEnumeratorVersion", Culture); }
		}

		/// <summary>
		/// Looks up a localized string similar to Table "{0}" column "{1}" already defined foreign key. Column can define only one foreign key..
		/// </summary>
 		public static string ErrorForeignKeyExists(string tableName, string columnName) {
			return string.Format(FormatCulture, ResourceManager.GetString("ErrorForeignKeyExists", Culture), tableName, columnName);
		}

		/// <summary>
		/// Looks up a localized string similar to Table "{0}" already contains foreign key "{1}"..
		/// </summary>
 		public static string ErrorForeignKeyNameExists(string tableName, string constraintName) {
			return string.Format(FormatCulture, ResourceManager.GetString("ErrorForeignKeyNameExists", Culture), tableName, constraintName);
		}

		/// <summary>
		/// Looks up a localized string similar to Can not expand hash table it is too big..
		/// </summary>
 		public static string ErrorHashExpandFailed {
			get { return ResourceManager.GetString("ErrorHashExpandFailed", Culture); }
		}

		/// <summary>
		/// Looks up a localized string similar to Hash table insert failed..
		/// </summary>
 		public static string ErrorHashInsertFailed {
			get { return ResourceManager.GetString("ErrorHashInsertFailed", Culture); }
		}

		/// <summary>
		/// Looks up a localized string similar to Cannot get next prime number..
		/// </summary>
 		public static string ErrorHashPrimeFailed {
			get { return ResourceManager.GetString("ErrorHashPrimeFailed", Culture); }
		}

		/// <summary>
		/// Looks up a localized string similar to The store is in active transaction and can not be set to any version..
		/// </summary>
 		public static string ErrorInvalidUpgrade {
			get { return ResourceManager.GetString("ErrorInvalidUpgrade", Culture); }
		}

		/// <summary>
		/// Looks up a localized string similar to Field "{0}.{1}" does not have any unique indexes defined on it..
		/// </summary>
 		public static string ErrorNoIndex(string tableName, string fieldName) {
			return string.Format(FormatCulture, ResourceManager.GetString("ErrorNoIndex", Culture), tableName, fieldName);
		}

		/// <summary>
		/// Looks up a localized string similar to Index must be unique in order to perform FindUnique operation..
		/// </summary>
 		public static string ErrorNotUniqueIndex {
			get { return ResourceManager.GetString("ErrorNotUniqueIndex", Culture); }
		}

		/// <summary>
		/// Looks up a localized string similar to Table "{0}" does not contain primary key and therefore foreign key cannot be created..
		/// </summary>
 		public static string ErrorPrimaryKeyMissing(string tableName) {
			return string.Format(FormatCulture, ResourceManager.GetString("ErrorPrimaryKeyMissing", Culture), tableName);
		}

		/// <summary>
		/// Looks up a localized string similar to Table "{0}" already has primary key..
		/// </summary>
 		public static string ErrorPrimaryKeyRedefinition(string tableName) {
			return string.Format(FormatCulture, ResourceManager.GetString("ErrorPrimaryKeyRedefinition", Culture), tableName);
		}

		/// <summary>
		/// Looks up a localized string similar to Attempt to add SnapTable to SnapStore that it does not belong to..
		/// </summary>
 		public static string ErrorSnapTable {
			get { return ResourceManager.GetString("ErrorSnapTable", Culture); }
		}

		/// <summary>
		/// Looks up a localized string similar to Attempt to freeze store that does not contain any table..
		/// </summary>
 		public static string ErrorStoreIsEmpty {
			get { return ResourceManager.GetString("ErrorStoreIsEmpty", Culture); }
		}

		/// <summary>
		/// Looks up a localized string similar to The store must be not frozen to perform this operation..
		/// </summary>
 		public static string ErrorStoreIsFrozen {
			get { return ResourceManager.GetString("ErrorStoreIsFrozen", Culture); }
		}

		/// <summary>
		/// Looks up a localized string similar to The store must be frozen to perform this operation..
		/// </summary>
 		public static string ErrorStoreNotFrozen {
			get { return ResourceManager.GetString("ErrorStoreNotFrozen", Culture); }
		}

		/// <summary>
		/// Looks up a localized string similar to Table "{0}" is to big to add more rows..
		/// </summary>
 		public static string ErrorTableTooBig(string tableName) {
			return string.Format(FormatCulture, ResourceManager.GetString("ErrorTableTooBig", Culture), tableName);
		}

		/// <summary>
		/// Looks up a localized string similar to Transaction cannot be started as it is too many transactions was started already..
		/// </summary>
 		public static string ErrorTooManyTransactions {
			get { return ResourceManager.GetString("ErrorTooManyTransactions", Culture); }
		}

		/// <summary>
		/// Looks up a localized string similar to Cannot add any more values in the value list because it is too big already..
		/// </summary>
 		public static string ErrorValueListTooBig {
			get { return ResourceManager.GetString("ErrorValueListTooBig", Culture); }
		}

		/// <summary>
		/// Looks up a localized string similar to Can not get data of just deleted row..
		/// </summary>
 		public static string ErrorWrongNewData {
			get { return ResourceManager.GetString("ErrorWrongNewData", Culture); }
		}

		/// <summary>
		/// Looks up a localized string similar to Can not get data of just inserted row..
		/// </summary>
 		public static string ErrorWrongOldRow {
			get { return ResourceManager.GetString("ErrorWrongOldRow", Culture); }
		}

		/// <summary>
		/// Looks up a localized string similar to Foreign key "{0}" violation..
		/// </summary>
 		public static string ForeignKeyViolation(string constraintName) {
			return string.Format(FormatCulture, ResourceManager.GetString("ForeignKeyViolation", Culture), constraintName);
		}

		/// <summary>
		/// Looks up a localized string similar to Unique constraint "{0}" violation..
		/// </summary>
 		public static string UniqueConstraintViolation(string constraintName) {
			return string.Format(FormatCulture, ResourceManager.GetString("UniqueConstraintViolation", Culture), constraintName);
		}

		/// <summary>
		/// Looks up a localized string similar to Composite index should contain different fields..
		/// </summary>
 		public static string ErrorCompositeFields {
			get { return ResourceManager.GetString("ErrorCompositeFields", Culture); }
		}

		/// <summary>
		/// Looks up a localized string similar to Fields "{0}.{1}" and {0}.{2} do not have any unique indexes defined on them..
		/// </summary>
 		public static string ErrorNoIndex2(string tableName, string field1Name, string field2Name) {
			return string.Format(FormatCulture, ResourceManager.GetString("ErrorNoIndex2", Culture), tableName, field1Name, field2Name);
		}

		/// <summary>
		/// Looks up a localized string similar to The row is not deleted and so can not be undeleted..
		/// </summary>
 		public static string ErrorUndeleteRow {
			get { return ResourceManager.GetString("ErrorUndeleteRow", Culture); }
		}

		/// <summary>
		/// Looks up a localized string similar to Attempt to enumerate rolled back actions on transaction that was not rolled back..
		/// </summary>
 		public static string ErrorRollbackEnumeration {
			get { return ResourceManager.GetString("ErrorRollbackEnumeration", Culture); }
		}
	}
}
