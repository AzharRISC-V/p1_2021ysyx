
一、五级流水线和各个模块

IF: 取指
    根据PC从存储器取出指令，这里主要是控制PC产生逻辑，取指令的功能交由top层来完成
    第一种情况是 PC + 4
    第二种情况是 PC = JMP

ID: 译码
    将inst进行翻译，得到：指令类型(R,S,I,B,U,J); 操作码[6:2]; 功能码funct3,funct7；寄存器rs1,rs2,rsd；带符号扩赞的立即数imm
    对于寄存器rs1,rs2，送出寄存器索引，经过top层转送给RegFile，然后RegFile取出数据再回送到ID模块

EX: 执行
    译码后所需要进行的计算类型已知，并且从RegFile中得到了所需的操作数，则可以运算。
    执行结果一般都需要写入寄存器，转去WB模块

MEM: 访存
    包括存储器读取或写入两个过程。
    如果是存储器读取，还需要WB模块

WB: 写回
    将指令执行的结果写回RegFile。
    如果是普通运算指令，结果来自于EX阶段；
    如果是存储器读取指令，结果来自于MEM结果。

RegFile: 寄存器文件
    支持两读一写，时钟上升沿出发，一个周期即可完成

SimTop: 顶层
    连接了上述几个模块的输出输出接口

ram_1w2r: 一写两读的存储器访问接口
    后期，需要把指令读取、数据读取、数据写入等整合到一起，防止数据流阻塞，
    也方便AXI4总线接入。

二、几种数据流
load
    IF -> ID -> MEM read -> WB

store
    IF -> ID -> MEM write

other
    IF -> ID -> EX -> WB

三、控制时序

1. 第一版，Counter控制（08.31之前）
        2     3     4     5     6     7
add     IF    ID    EX          WB    CMT
store   IF    ID          MEM         CMT
load    IF    ID          MEM   WB    CMT

2. 第二版，单时钟周期（09.01）
clk_posedge   IF,ID,EX,MEM_Read
clk_negedge   MEM_Write, WB

四、自定义指令

0x6B (opcode[4:0]=11010)    // nemu_trap a0
0x07 (opcode[4:0]=00001)    // putch a0

附录A：
1. verilog中的一些常用语法现象
a. wire(线网) 与 reg(寄存器) 类型
  线网与实际中的电线类似，其数值只能通过连续赋值，由赋值符右侧连接的驱动源决定。
  线网在初始化之前为x。若未接驱动源，其值为z。
  模块中，未标注类型时默认为wire。需要考虑是否加上reg关键字。
  寄存器可以保存当前的值，直到另一个数值被赋给它。保持当前数值的过程中，不需要驱动源的作用。
  寄存器若未赋值，初始为x。
  Verilog中的寄存器类型变量与真实的寄存器硬件不同，它时一个储存数值的变量。
  在过程块（initial过程或always过程）中对变量赋值，该变量必须是寄存器类型。
  关于线网与寄存器类型的选择：
    在过程块中的变量只能是寄存器类型；
    连续赋值的对象只能是线网类型；
b. wire、reg的连续赋值
  不含时序的组合逻辑部分可以使用线网的连续赋值描述
    wire out; assign out = in1;
  reg也可以使用assign连续赋值，但实际上不可综合，可以另外设置一个wire类型来赋值
c. reg的过程赋值
  有两种赋值运算，阻塞赋值（blocking assignment），运算符为=，非阻塞赋值（non-...），运算符为 <=。
  顺序代码块中使用阻塞赋值，则这一句没有执行完，后面的语句不会执行；
  顺序代码块中使用非阻塞赋值，则这些语句是同时执行，因此后一个语句所用到的是前面一个语句的执行前变量的数值。例如，带有两个正反输出端的简单范例：
    always @ (negedge reset or posedge clk) begin
      a <= b;
      b <= a;
    end
  其中，a和b会交换数值。
d. 两种过程
  always是过程循环执行；initial过程只执行一次。

2. always和assign的区分
(1)、语法定义
assign，连续赋值。always，敏感赋值。
连续赋值，就是无条件全等。敏感赋值，就是有条件相等。
assign的对象是wire，always的对象是reg。这就是语法约束。
(2)、功能差异
assign对应电路下连线操作。always对应插入敏感控制连线。
这里容易混淆的就是assign综合的一定是组合电路，但是always综合的不一定是时序电路。
always的敏感列表使用*号就可以等效综合为组合电路。如果使用的是电平触发，也会综合成相应的组合电路。只有出现边沿触发时，才会综合成时序电路。
而时序电路，基础就是时钟和使能两个关键信号。时钟在always模块中不再出现（时钟信号在敏感信号作用下的值一直相等，没有使用在内部的意义，当然也可以转化后使用）。
而对于使能信号，则是会有一个if判断语句，而且处于第一优先级。这就是异步复位。如果不在敏感列表而处于第一优先级，则是同步复位信号。
(3)、总结
从上面的描述可以看到：always可以实现两种电路，是不是可以不用assign来实现设计？理论上可以，但是会加大设计的难度。
首先要明确的是，always只能对reg变量赋值，这导致wire变量赋值困难。如果没有assign，每个wire变量都要加入一个reg缓冲。
可以简单理解：开始时只有always，可以实现基本的功能，然后将其中的组合逻辑提取出来构成assign。
同时引入了wire。也就是assign是always的补充（只是方便理解，没有根据）。
(4)、编程技巧
初期使用 always @(*) 可以达到组合逻辑的效果，后期再考虑assign方式。
  always @(*)能综合成组合逻辑电路的条件是，不要形成Latch，即 else, default 都要补全。
如果需要时序逻辑电路， always @(posedge clk)
如果是异步复位，则将clk、ena/clr信号都放入敏感列表；
如果是同步复位，则不加入敏感列表，而是放在第一个if语句中。

3. SystemVerilog扩充的always块
  always_latch    允许Latch，忽略电平信号列表
  always_ff

4. am-kernels/test/cpu-tests 测试记录
已通过：
add add-longlong fact goldbach if-else leap-year load-store
matrix-mul mul-longlong prime shuixianhua sub-longlong
switch to-lower-case wanshu bit bubble-sort div fib
movsx pacal select-sort max min3 mov-3 quick-sort
recursion shift sum unalign
hello-str string

5. riscv-tests 测试记录
未通过：
其他已通过

6. am-kernels/kernels/hello 测试
已通过。
如需向使用了am的程序的main()添加参数，
使用 make mainargs=xxx 即可
具体参考 am/srcipts/riscv64-mycpu.mk line:22

7. am-kernels/benchmarks测试
coremark    100次     75s
dhrystone   50000次   40s
microbench  在默认ref参数下，bf测试通不过(太久了），fib测试稍久，其余的都很快

2021.09.02 改进后重新测试
coremark    100次     37s
coremark    1000次    375s,=6min
  Running CoreMark for 1000 iterations
    2K performance run parameters for coremark.
  CoreMark Size    : 666
  Total time (ms)  : 375038
  Iterations       : 1000
  Compiler version : GCC9.3.0
  seedcrc          : 0x[0]crclist       : 0x[0]crcmatrix     : 0x[0]crcstate      : 0x[0]crcfinal      : 0xFinised in 375038 ms.
  ==================================================
  CoreMark PASS       7 Marks
                  vs. 100000 Marks (i7-7700K @ 4.20GHz)

dhrystone   50000次   18s
microbench            3000s,=50min
  ======= Running MicroBench [input *ref*] =======
  [qsort] Quick sort: * Passed.
    min time: 10121.035 ms [43]
  [queen] Queen placement: * Passed.
    min time: 14573.418 ms [27]
  [bf] Brainf**k interpreter: * Passed.
    min time: 97555.140 ms [17]
  [fib] Fibonacci number: * Passed.
    min time: 2443636.967 ms [0]
  [sieve] Eratosthenes sieve: * Passed.
    min time: 183325.212 ms [18]
  [15pz] A* 15-puzzle search: * Passed.
    min time: 22925.841 ms [23]
  [dinic] Dinic's maxflow algorithm: * Passed.
    min time: 29258.914 ms [27]
  [lzip] Lzip compression: * Passed.
    min time: 27659.181 ms [24]
  [ssort] Suffix sort: * Passed.
    min time: 43883.163 ms [9]
  [md5] MD5 digest: * Passed.
    min time: 158985.709 ms [9]
  ==================================================
  MicroBench PASS        19 Marks
                    vs. 100000 Marks (i9-9900K @ 3.60GHz)
  Scored time: 3031924.580 ms
  Total  time: 3229665.207 ms
  Core 0: HIT GOOD TRAP at pc = 0x800048b8



附录B - 解决bug的记录:
1. csr读取mcycle时错误
刚开始发现NEMU暂不支持mcycle，和minstret寄存器，本觉得这是个简单的任务，可以修改源码并使之支持，
后来改到一半发现mcycle的生成机制并不清楚:
  需要REF,DUT之间的数据拷贝，这几个变量没有弄清楚。虽然模拟的写出了mcycle寄存器的访问过程。
后来想想，这两个数据用模拟器是难以模拟的：
  mcycle虽然可以用clock来模拟，但是否同硬件一致？
  最难的是minstret，不知道一个指令到底消耗几个时钟周期。
后来就使用 difftest 的 skip 机制了，
  刚开始认为skip只是跳过当前指令，那么 csrr %0,0xb00 在读取数据后，%0分配的寄存器值被改变了啊！
  于是想着后续加入一条li xN,0来消除刚才寄存器的输入，并跟踪csrr，跳过连续的两条指令，
  但这样也有问题：如果是中断进来呢？另外这个寄存器的值是否进入时需要push来保存？
后来发现有更好的方法，difftest 的 skip 机制会拷贝执行结果，那个受影响的寄存器状态会被复制过去，我多虑了。
后来比对看到为何 csrr 之后的数据总是差1，原来是 mcycle寄存器我是在clk_negedge时变化的，改为posedge即可。
2. bgeu实现错误，这个bug发现的过程比较特别。
已经经过了 riscv-tests， 原以为基本指令的实现已经没有问题了，原来不是。
在fceux的mario测试中，发现错误，汇编指令如下
    80007f28:	0007051b          	sext.w	a0,a4
    80007f2c:	feb574e3          	bgeu	a0,a1,80007f14 <_Z12FCEUPPU_Loopi+0x147c>
    80007f30:	0002a803          	lw	a6,0(t0)
在 80007f2c 的bgeu执行错误，确实实现上有错误。
需要dump大概是 40952400条指令的位置，输入 make ALL=fceux dump START=81904800 (周期数是指令数的2倍)
现在马里奥已经欢快的运行了。
可能这次改进了putch的实现也有关系，每行刷新一次，整体效果好了一些。
