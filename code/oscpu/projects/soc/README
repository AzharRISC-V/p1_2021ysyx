
-----------------------------------------------------------
2021.09.29 14:10
所有6个测试通过，终于告一段落，记录如下。
1. 测试通过的输出信息
  Initializing flash with "ysyxSoC/flash/hello-flash.bin" ...
  Start simulating ...
  Hello RISC-V
  ^CSIGINT received, gracefully shutting down... Type Ctrl+C again to stop forcely.
  Simulated 12482 cycles in 1s

  Initializing flash with "ysyxSoC/flash/memtest-flash.bin" ...
  Start simulating ...
  START TEST...ALL DATA PREPARED
  ALL TESTS PASSED!!
  ^CSIGINT received, gracefully shutting down... Type Ctrl+C again to stop forcely.
  Simulated 1410712 cycles in 71s

  Initializing flash with "ysyxSoC/flash/rtthread-flash.bin" ...
  Start simulating ...
  heap: [0x8000d478 - 0x8640d478]
  \ | /
  - RT -     Thread Operating System
  / | \     4.0.4 build Sep  8 2021
  2006 - 2021 Copyright by rt-thread team
  Hello RISC-V!
  ^CSIGINT received, gracefully shutting down... Type Ctrl+C again to stop forcely.
  Simulated 3629854 cycles in 200s

  Initializing flash with "ysyxSoC/loader/hello-loader.bin" ...
  Start simulating ...
  Loading program of size 208: expect 128 '#'
  Loading.....#####################################################
  Load Finished
  Hello RISC-V
  ^CSIGINT received, gracefully shutting down... Type Ctrl+C again to stop forcely.
  Simulated 114238 cycles in 5s

  Initializing flash with "ysyxSoC/loader/memtest-loader.bin" ...
  Start simulating ...
  Loading program of size 512: expect 128 '#'
  Loading.....#################################################################################################################################
  Load Finished
  START TEST...ALL DATA PREPARED
  ALL TESTS PASSED!!
  ^CSIGINT received, gracefully shutting down... Type Ctrl+C again to stop forcely.
  Simulated 1514078 cycles in 83s

  Initializing flash with "ysyxSoC/loader/rtthread-loader.bin" ...
  Start simulating ...
  Loading program of size 69880: expect 128 '#'
  Loading.....################################################################################################################################
  Load Finished
  heap: [0x800223d0 - 0x864223d0]
  \ | /
  - RT -     Thread Operating System
  / | \     4.0.4 build Sep  8 2021
  2006 - 2021 Copyright by rt-thread team
  Hello RISC-V!
  ^CSIGINT received, gracefully shutting down... Type Ctrl+C again to stop forcely.
  Simulated 7605560 cycles in 396s

  测试结果
                flash    loader  
    hello       1s       7s      
    memtest     71s      83s     
    rtthread    200s     396s    
  （由于还开着另一个虚拟机上腾讯会议，所以这里应该是慢了一倍）

2. 现阶段的设计特性
  a. 简单的5级流水线，并未流起来，所以没有各种冒险问题。
  b. 实现了关键的cache部件，速度有很大提高。
  c. 近几天解决了cache一致性问题，方法是：
     收到fence指令时，将dcache中所有有效并以主存地址开头的缓存块都搬运到icache，并将这些块的dirty置位。
     (1). 原有icache的数据不需要写回，因此可以直接覆盖。
     (2). 在loader程序工作时，一部分数据已经进了主存，另一部分在dcache中，而fence并不将它们写回主存，而是转移到icache
     (3). 所有刚刚进入icache的数据都已被标记为dirty，所以在后续的取指过程中，这些数据才会被慢慢的写入主存，不过没关系。
3. 改进的几个方向
  a. 检查各个部件浪费掉的时序，是否可以改进。
  b. 检查冗余信号
  c. 观察cache的设计性能
  d. 画流程图，提交代码。
  e. 重新编译这6个程序，带上6b停机指令，以实现自动停止。但rtthread需要考虑在何时停机。
  f. 去掉快速spi功能，再测一遍，看看cache和快速spi两方面各自的效果。


4. SoC后端测试通过，2021.10.13 10:44:20 报告，测试通过。
  a. 这几天卡了很久，问题出在 axi 到 uart 这边。
     刚开始，看到程序死循环，UART控制寄存器没有写进去，所以串口输出时导致因5号寄存器一直为0而不能写入，于是死循环。
     后来，xxx，然后从寄存器查看，uart是在正常工作了。但后端说终端还是没有输出。
     后来，我们拿到波形查看，uart那边的信号有间歇性的xx高阻状态。
     后来，我对比了其他同学的波形，看到我的 wvalid信号拉低比wready慢了一个周期，于是改成在wdone时就拉低，这样wvalid和wready是同时拉低的，
     应该能够防止再向总线送出额外的数据。
     昨晚，后端手动测试后还是失败的，我准备仔细再检查axi的控制信号。
     今早，我又发现axi_addr，在空闲时会被不时的驱动起来，于是，我清理了这些可能受干扰的信号，其他没有改动。
     在10:30提交了程序。由于昨天ysyx团队宣布现在的后端报告2小时即可得到结果，非常欣慰，于是欣然等待结果。
     在10:44得到了报告，幸运的是，所有测试都通过了。
     我联系了后端的龙工，想要让他再抓一下uart波形，我看看到底怎么回事，为何昨晚程序是失败的。
     他反馈说有个问题，在他那里hello仍然没过。
     现在，他们后端内部在检查，到底是什么问题。我问了龙工
     (1) 说他们的bin文件都是相同，但SoC集成不一样。
     (2) 这就有可能是龙工那边的axi接口不同所致；还有可能是bin的问题，虽然他说是同一套。
     (3) 我有提示他，我的程序依赖于fence.i指令，从flash搬运数据至RAM后，跳转指令之前，需要这个fence.i指令来通知我同步cache。
     (4) 手动检查一下龙工的hello程序 hello-riscv64-mycpu，看到这个hello是不是在搬运数据并在RAM执行，有没有fence.i指令。
     (5) 结果是：看到这个程序时在flash中运行，没有搬运。可能只是简单的hello程序。
     又发现 io_master_awid/awburst/arid/arburst信号都是xx高阻，非常奇怪，程序已经给它assign到值了。
     (1) 一处可能的语法问题是：
        `define AXI_ID_WIDTH    4
        assign axi_id = {`AXI_ID_WIDTH{1'b0}};
        也许是这种语法在SoC的后端环境中不支持，导致了错误。先暂时死马当活马医，去掉该语法试试看。
        顺便把 awburst/arburst 信号也修改为直接赋值。
        